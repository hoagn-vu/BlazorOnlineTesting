@page "/{subjectId}/listquestion"
@attribute [Authorize(Roles = "admin")]
@layout MainLayout

@using testQuiz.Models
@using MongoDB.Bson;
<HeadContent>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
</HeadContent>
@inject testQuiz.Services.QuestionService questionService
@inject testQuiz.Services.SubjectService subjectService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@code {
    [Parameter]
    public string subjectId { get; set; }
    public string subjectName { get; set; }
    private List<Question> Questions = new List<Question>();
    private Question editQuestion = new Question();
    private Question newQuestion = new Question { Options = new List<Option>() };
    private bool isEditingNew = false;

    protected override async Task OnInitializedAsync()
    {
        ObjectId objId = ObjectId.Parse(subjectId);
        Questions = questionService.GetQuestionsBySubjectId(objId);
        subjectName = subjectService.GetNameSubject(objId);
    }

    private void EditQuestion(ObjectId id)
    {
        editQuestion = Questions.FirstOrDefault(q => q.Id == id);
    }

    private void AddOption(Question question)
    {
        question.Options.Add(new Option { OptionText = "", IsCorrectOption = false });
    }

    private void RemoveOption(Question question, Option option)
    {
        question.Options.Remove(option);
    }

    private async Task SaveEditQuestion(Question question)
    {
        if (string.IsNullOrWhiteSpace(question.QuestionText))
        {
            // Console.WriteLine("You have to enter the question.");
            await JSRuntime.InvokeVoidAsync("alert", "You have to enter the question");
            return;
        }

        // Kiểm tra điều kiện có ít nhất 2 đáp án và 1 đáp án đúng
        if (question.Options.Count(o => !string.IsNullOrWhiteSpace(o.OptionText)) < 2)
        {
            // Console.WriteLine("You have to provide at least 2 options.");
            await JSRuntime.InvokeVoidAsync("alert", "You have to provide at least 2 options");
            return;
        }

        if (!question.Options.Any(o => o.IsCorrectOption))
        {
            // Console.WriteLine("You have to select at least 1 correct option.");
            await JSRuntime.InvokeVoidAsync("alert", "You have to select at least 1 correct option");
            return;
        }

        // Xóa tất cả đáp án có nội dung rỗng hoặc chỉ chứa khoảng trắng
        question.Options.RemoveAll(opt => string.IsNullOrWhiteSpace(opt.OptionText));

        questionService.SaveOrUpdate(question);
        editQuestion = null;
        StateHasChanged();
    }

    private async Task CancelSaveEditQuestion()
    {
        editQuestion = null;
        await OnInitializedAsync();
    }

    private void StartAddNewQuestion()
    {
        isEditingNew = true;
        newQuestion = new Question { Options = new List<Option> { new Option(), new Option() }, SubjectId = ObjectId.Parse(subjectId) };
    }

    // private void SaveNewQuestion()
    private async Task SaveNewQuestion()
    {
        if (string.IsNullOrWhiteSpace(newQuestion.QuestionText))
        {
            // Console.WriteLine("You have to enter the question.");
            await JSRuntime.InvokeVoidAsync("alert", "You have to enter the question");
            return;
        }

        // Kiểm tra điều kiện có ít nhất 2 đáp án và 1 đáp án đúng
        if (newQuestion.Options.Count(o => !string.IsNullOrWhiteSpace(o.OptionText)) < 2)
        {
            // Console.WriteLine("You have to provide at least 2 options.");
            await JSRuntime.InvokeVoidAsync("alert", "You have to provide at least 2 options");
            return;
        }

        if (!newQuestion.Options.Any(o => o.IsCorrectOption))
        {
            // Console.WriteLine("You have to select at least 1 correct option.");
            await JSRuntime.InvokeVoidAsync("alert", "You have to select at least 1 correct option");
            return;
        }

        // Xóa tất cả đáp án có nội dung rỗng hoặc chỉ chứa khoảng trắng
        newQuestion.Options.RemoveAll(opt => string.IsNullOrWhiteSpace(opt.OptionText));

        questionService.SaveOrUpdate(newQuestion);
        Questions.Add(newQuestion);
        isEditingNew = false;
        StateHasChanged();
        // OnInitializedAsync();
        await OnInitializedAsync();

    }

    private void CancelSaveNewQuestion()
    {
        isEditingNew = false;
    }

    private async Task ConfirmDeleteQuestion(ObjectId id)
    {
        // Hiển thị hộp thoại xác nhận
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Confirm Delete?");

        if (confirmed)
        {
            // Nếu người dùng chọn "OK", thực hiện xóa
            questionService.Delete(id);
            await OnInitializedAsync(); // Cập nhật lại danh sách sau khi xóa
        }
    }
}

<h1 class="mb-4 text-center">Questions for Subject: @subjectName</h1>

@if (isEditingNew)
{
    <div class="card shadow-lg w-75 mx-auto mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Add New Question</h5>
        </div>
        <div class="card-body">
            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="newQuestionInput" placeholder="New Question" @bind="newQuestion.QuestionText" required />
                <label for="newQuestionInput">New Question Title</label>
            </div>

            @foreach (var option in newQuestion.Options)
            {
                <div class="input-group mb-2">
                    <div class="input-group-text">
                        <input class="form-check-input mt-0" type="checkbox" @bind="option.IsCorrectOption" />
                    </div>
                    <input type="text" class="form-control" placeholder="Option Text" @bind="option.OptionText" />
                    <button class="btn btn-outline-danger" @onclick="() => RemoveOption(newQuestion, option)">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            }

            <div class="d-flex mb-2">
                <button class="btn btn-outline-secondary me-auto" @onclick="() => AddOption(newQuestion)">
                    <i class="fa fa-plus"></i> Add Option
                </button>
            </div>

            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" @bind="newQuestion.RandomizeOptionsOrder" id="randomizeNewOptionsOrder">
                <label class="form-check-label" for="randomizeNewOptionsOrder">
                    Randomize Options Order
                </label>
            </div>

            <div class="d-flex justify-content-center">
                <button class="btn btn-success me-2" @onclick="SaveNewQuestion">Save</button>
                <button class="btn btn-secondary" @onclick="CancelSaveNewQuestion">Cancel</button>
            </div>
        </div>
    </div>
}
else
{
    <button class="btn btn-success mb-3" @onclick="StartAddNewQuestion">
        <i class="fa fa-plus"></i> Add New Question
    </button>
}

@foreach (var question in Questions)
{
    <div class="card mb-3">
        @if (editQuestion?.Id == question.Id)
        {
            <div class="card-body">
                <div class="form-floating mb-2">
                    <input type="text" class="form-control" placeholder="Question" @bind="editQuestion.QuestionText" />
                    <label>Question Title</label>
                </div>

                @foreach (var option in editQuestion.Options)
                {
                    <div class="input-group mb-2">
                        <div class="input-group-text">
                            <input class="form-check-input mt-0" type="checkbox" @bind="option.IsCorrectOption" />
                        </div>
                        <input type="text" class="form-control" placeholder="Option" @bind="option.OptionText" />
                        @*<a class="text-secondary d-flex align-items-center text-decoration-none" @onclick="() => RemoveOption(editQuestion, option)">
                    <i class="fa fa-times ms-3 me-2"></i>
                </a>*@

                        <button class="btn btn-outline-danger" @onclick="() => RemoveOption(editQuestion, option)">
                            <i class="fa fa-times"></i>
                        </button>
                    </div>
                }

                @*<div class="input-group mb-2">
            <a class="text-secondary d-flex align-items-center text-decoration-none" @onclick="() => AddOption(editQuestion)">
                <i class="fa fa-plus ms-1 me-2"></i>Add more options
            </a>
        </div>*@

                <div class="d-flex mb-2">
                    <button class="btn btn-outline-secondary me-auto" @onclick="() => AddOption(editQuestion)">
                        <i class="fa fa-plus"></i> Add Option
                    </button>
                </div>

                @*<div class="input-group mb-2">
                    <input class="form-check-input" type="checkbox" @bind="editQuestion.RandomizeOptionsOrder" id="randomizeEditOptionsOrder">
                    <label class="form-check-label" for="randomizeEditOptionsOrder">
                        Randomize Options Order
                    </label>
                </div>*@

                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" @bind="editQuestion.RandomizeOptionsOrder" id="randomizeEditOptionsOrder">
                    <label class="form-check-label" for="randomizeEditOptionsOrder">
                        Randomize Options Order
                    </label>
                </div>

                <div class="input-group mb-2 justify-content-center">
                    <a class="btn btn-primary" @onclick="() => SaveEditQuestion(editQuestion)">Save</a>
                    <a class="btn btn-danger" @onclick="() => CancelSaveEditQuestion()">Cancel</a>
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 style="margin-bottom: 0px">Câu hỏi:</h5>
                    <div>
                        <a class="btn btn-primary me-2" @onclick="() => EditQuestion(question.Id)">Edit</a>
                        <a class="btn btn-danger" @onclick="() => ConfirmDeleteQuestion(question.Id)">Delete</a>
                    </div>
                </div>
                <div class="card-body">
                    <h5 class="card-title mb-0 ms-1">@question.QuestionText</h5>
                    <ul class="list-group mt-3">
                        @foreach (var option in question.Options)
                        {
                            var listItemClass = option.IsCorrectOption ? "list-group-item list-group-item-success" : "list-group-item";

                            <li class="@listItemClass">
                                @option.OptionText
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
    </div>
}



















@*<h1>Questions for Subject: @subjectName</h1>

    @if (isEditingNew)
    {
        <div class="card w-75 ms-5 mb-4">
            <h5 class="card-header">Add New Question</h5>
            <div class="card-body">
                <div class="form-floating mb-2">
                    <input type="text" class="form-control" id="newQuestionInput" placeholder="New Question" @bind="newQuestion.QuestionText" required/>
                    <label for="newQuestionInput">New Question Title</label>
                </div>

                @foreach (var option in newQuestion.Options)
                {
                    <div class="input-group mb-2">
                        <div class="input-group-text">
                            <input class="form-check-input mt-0" type="checkbox" value="" @bind="option.IsCorrectOption" />
                        </div>
                        <input type="text" class="form-control" placeholder="Option" @bind="option.OptionText" />
                        <a class="text-secondary d-flex align-items-center text-decoration-none" @onclick="() => RemoveOption(newQuestion, option)">
                            <i class="fa fa-times ms-3 me-2"></i>
                        </a>
                    </div>
                }

                <div class="input-group mb-2">
                    <a class="text-secondary d-flex align-items-center text-decoration-none" @onclick="() => AddOption(newQuestion)">
                        <i class="fa fa-plus ms-1 me-2"></i>Add more options
                    </a>
                </div>

                <div class="input-group mb-2">
                    <input class="form-check-input" type="checkbox" @bind="newQuestion.RandomizeOptionsOrder" id="randomizeNewOptionsOrder">
                    <label class="form-check-label" for="randomizeNewOptionsOrder">
                        Randomize Options Order
                    </label>
                </div>

                <div class="input-group mb-2 justify-content-center">
                    <a class="btn btn-primary" @onclick="SaveNewQuestion">Save</a>
                    <a class="btn btn-danger" @onclick="CancelSaveNewQuestion">Cancel</a>
                </div>
            </div>
        </div>
    }
    else
    {
        <button class="btn btn-success mb-3" @onclick="StartAddNewQuestion">Add New Question</button>
    }

    @foreach (var question in Questions)
    {
        <div class="card mb-3">
            @if (editQuestion?.Id == question.Id)
            {
                <div class="card-body">
                    <div class="form-floating mb-2">
                        <input type="text" class="form-control" placeholder="Question" @bind="editQuestion.QuestionText" />
                        <label>Question Title</label>
                    </div>

                    @foreach (var option in editQuestion.Options)
                    {
                        <div class="input-group mb-2">
                            <div class="input-group-text">
                                <input class="form-check-input mt-0" type="checkbox" @bind="option.IsCorrectOption" />
                            </div>
                            <input type="text" class="form-control" placeholder="Option" @bind="option.OptionText" />
                            <a class="text-secondary d-flex align-items-center text-decoration-none" @onclick="() => RemoveOption(editQuestion, option)">
                                <i class="fa fa-times ms-3 me-2"></i>
                            </a>
                        </div>
                    }

                    <div class="input-group mb-2">
                        <a class="text-secondary d-flex align-items-center text-decoration-none" @onclick="() => AddOption(editQuestion)">
                            <i class="fa fa-plus ms-1 me-2"></i>Add more options
                        </a>
                    </div>

                    <div class="input-group mb-2">
                        <input class="form-check-input" type="checkbox" @bind="editQuestion.RandomizeOptionsOrder" id="randomizeEditOptionsOrder">
                        <label class="form-check-label" for="randomizeEditOptionsOrder">
                            Randomize Options Order
                        </label>
                    </div>

                    <div class="input-group mb-2 justify-content-center">
                        <a class="btn btn-primary" @onclick="() => SaveEditQuestion(editQuestion)">Save</a>
                        <a class="btn btn-danger" @onclick="() => CancelSaveEditQuestion()">Cancel</a>
                    </div>
                </div>
            }
            else
            {
                <div class="card-body">
                    <a class="btn btn-primary" @onclick="() => EditQuestion(question.Id)">Edit</a>
                    <a class="btn btn-danger" @onclick="() => ConfirmDeleteQuestion(question.Id)">Delete</a>

                    <h5 class="card-title">@question.QuestionText</h5>
                    <ul>
                        @foreach (var option in question.Options)
                        {
                            if (@option.IsCorrectOption)
                            {
                                <li class="bg-success">@option.OptionText</li>
                            }
                            else
                            {
                                <li>@option.OptionText</li>
                            }
                        }
                    </ul>
                </div>
            }
        </div>
    }*@








